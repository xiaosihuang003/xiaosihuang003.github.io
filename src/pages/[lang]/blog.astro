---
import Layout from "../../layouts/Layout.astro";
import { dict, normalizeLang, languages } from "../../i18n";
import { getCollection } from "astro:content";

export const prerender = true;

export function getStaticPaths() {
  return languages.map((lang) => ({ params: { lang } }));
}

const lang = normalizeLang(Astro.params.lang as string);
const t = dict[lang];

// 获取当前语言的所有文章（非草稿）并按日期倒序
const posts = (await getCollection("blog", ({ data }) => {
  return !data.draft && data.lang === lang;
})).sort((a, b) => +b.data.date - +a.data.date);

const base = lang === "en" ? "/en" : `/${lang}`;
---

<Layout lang={lang} title={`Xiaosi Huang · ${t.blog.title}`}>
  <section class="mx-auto max-w-5xl px-4">
    <h1 class="text-4xl font-extrabold mb-3">{t.blog.title}</h1>
    <p class="opacity-70 mb-8">{t.blog.subtitle}</p>

    {posts.length === 0 ? (
      <p class="opacity-60">{t.blog.empty || "No posts yet."}</p>
    ) : (
      <ul class="space-y-6">
        {posts.map((p) => (
          <li class="rounded-2xl border border-zinc-200 dark:border-zinc-800 p-6 hover:shadow-md transition">
            <a href={`${base}/blog/${p.slug}`} class="group block">
              {/* 标题 + 摘要 */}
              <h2 class="text-2xl font-semibold group-hover:underline">
                {p.data.title}
              </h2>

              {p.data.excerpt && (
                <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
                  {p.data.excerpt}
                </p>
              )}

              {/* 底部：左边时间，右边 = （可选缩略图）+ 标签 */}
              <div class="mt-3 flex justify-between items-start gap-4">
                <time datetime={p.data.date.toISOString()} class="text-xs text-gray-500">
                  {p.data.date.toLocaleDateString(lang)}
                </time>

                {/* 右侧区域：有封面就先放小图，再放标签；没有封面就只放标签。
                    这样第一篇（没有封面）完全不变，第二篇（有姆明）图就贴着标签左侧。 */}
                <div class="flex items-center gap-3">
                  {p.data.cover && (
                    <img
                      src={p.data.cover}
                      alt={p.data.coverAlt || p.data.title}
                      loading="lazy"
                      class="hidden md:block w-[108px] h-[72px] object-cover rounded-lg"
                    />
                  )}

                  {p.data.tags?.length > 0 && (
                    <div class="flex flex-wrap gap-2 justify-end">
                      {p.data.tags.map((tag) => (
                        <span class="text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">
                          {tag}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </a>
          </li>
        ))}
      </ul>
    )}
  </section>
</Layout>
