---
import Layout from "../../../layouts/Layout.astro";
import { dict, normalizeLang, languages } from "../../../i18n";
import { getCollection } from "astro:content";

export const prerender = true;

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((p) => ({
    params: { lang: p.data.lang, slug: p.slug },
  }));
}

const lang = normalizeLang(Astro.params.lang as string);
const t = dict[lang];

const slug = Astro.params.slug as string;
const all = await getCollection("blog");
const post = all.find((p) => p.slug === slug && p.data.lang === lang);
if (!post) throw new Error(`Post not found: ${lang}/${slug}`);

// —— 标题自动拆分：kicker（冒号前）+ 主标题（冒号后）
const rawTitle = post.data.title ?? "";
const parts = rawTitle.split(/[:：]/);
const kicker = parts.length > 1 ? parts[0].trim() : "";
const mainTitle =
  parts.length > 1
    ? rawTitle.slice(rawTitle.indexOf(parts[0]) + parts[0].length + 1).trim()
    : rawTitle.trim();

// —— 构造其它语言的“就地跳转”链接（没有对应译文就退到该语言的博客列表）
const langs = languages as readonly string[];
const baseId = post.slug.replace(new RegExp(`[-_]?(${langs.join("|")})$`), "");
function basePrefix(code: string) { return code === "en" ? "/en" : `/${code}`; }

const alternates = Object.fromEntries(
  langs.map((code) => {
    const re = new RegExp(`^${baseId}[-_]?${code}$`);
    const target = all.find((p) => p.data.lang === code && re.test(p.slug));
    return [
      code,
      target
        ? `${basePrefix(code)}/blog/${target.slug}`
        : `${basePrefix(code)}/blog`,
    ];
  })
);

// 同语言文章按日期排序（用于上一篇/下一篇 & 相关内容）
const siblings = (await getCollection("blog", ({ data }) => data.lang === lang && !data.draft))
  .sort((a, b) => +b.data.date - +a.data.date);

const idx = siblings.findIndex((x) => x.slug === post.slug);
const prevPost = idx > 0 ? siblings[idx - 1] : null;
const nextPost = idx >= 0 && idx < siblings.length - 1 ? siblings[idx + 1] : null;

const firstTag = post.data.tags?.[0];
const related = siblings
  .filter((x) => x.slug !== post.slug && (firstTag ? x.data.tags?.includes(firstTag) : true))
  .slice(0, 4);

// 返回列表 URL（兜底）
const base = lang === "en" ? "/en" : `/${lang}`;
const backToList = `${base}/blog`;

// 页面组件（MD 内容）
const { Content } = await post.render();
---

<Layout lang={lang} title={`${post.data.title} · Xiaosi Huang`} alternates={alternates}>
  <article class="post px-4 py-12">
    <!-- 面包屑 -->
    <nav class="text-sm text-zinc-500 mb-6">
      <a class="hover:underline" href={base + "/"}>{t.ui.breadcrumbs.home}</a>
      <span> / </span>
      <a class="hover:underline" href={base + "/blog"}>{t.ui.breadcrumbs.blog}</a>
      <span> / </span>
      <span class="opacity-70">{kicker || mainTitle}</span>
    </nav>

    <header class="mb-4 relative">
      <!-- 右上角：返回 Blog（跟随语言） -->
      <a href={backToList}
         class="absolute right-0 -top-2 rounded-full border px-3 py-1.5 text-sm
                border-zinc-200 dark:border-zinc-800 hover:bg-zinc-100 dark:hover:bg-zinc-800">
        ← {t.ui.backToBlog}
      </a>

      {kicker && (
        <div class="text-xs uppercase tracking-wide text-zinc-500 mb-2">
          {kicker}
        </div>
      )}

      <!-- 主标题：更小、更紧凑，并限制最大宽度 -->
      <h1
        class="break-anywhere text-balance font-bold
               text-[26px] md:text-[30px] lg:text-[34px]
               leading-snug -tracking-[0.005em] max-w-3xl mb-2">
        {mainTitle}
      </h1>

      {post.data.subtitle && (
        <p class="text-[15px] md:text-base text-zinc-600 dark:text-zinc-400 max-w-2xl mb-3">
          {post.data.subtitle}
        </p>
      )}

      <!-- 日期 + 标签 -->
      <div class="flex flex-wrap items-center gap-2 text-sm text-zinc-500 mb-4">
        <time datetime={post.data.date.toISOString()}>
          {post.data.date.toLocaleDateString(lang)}
        </time>

        {post.data.tags?.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {post.data.tags.map((tag) => (
              <span
                class="rounded-full border border-zinc-200 dark:border-zinc-800
                       bg-zinc-50 dark:bg-zinc-900/40 px-2 py-0.5 text-xs">
                #{tag}
              </span>
            ))}
          </div>
        )}
      </div>

      <!-- 封面（如有） -->
      {post.data.cover && (
        <figure class="post-cover">
          <img
            src={post.data.cover}
            alt={post.data.coverAlt || post.data.title}
            loading="eager" />
          {(post.data.coverCredit || post.data.coverCreditUrl) && (
            <figcaption>
              图片来源：
              {post.data.coverCreditUrl ? (
                <a href={post.data.coverCreditUrl} target="_blank" rel="noopener noreferrer nofollow">
                  {post.data.coverCredit || post.data.coverCreditUrl}
                </a>
              ) : (post.data.coverCredit)}
            </figcaption>
          )}
        </figure>
      )}
    </header>

    <div class="post-body">
      <Content />
    </div>

    <!-- 上一篇 / 下一篇（可选：先保留简单样式） -->
    <div class="mt-10 flex justify-between text-sm">
      <div>
        {prevPost && (
          <a class="hover:underline" href={`${base}/blog/${prevPost.slug}`}>← {prevPost.data.title}</a>
        )}
      </div>
      <div>
        {nextPost && (
          <a class="hover:underline" href={`${base}/blog/${nextPost.slug}`}>{nextPost.data.title} →</a>
        )}
      </div>
    </div>

    <!-- 相关内容（简单列表） -->
    {related.length > 0 && (
      <section class="mt-10">
        <h3 class="font-semibold mb-3">Related</h3>
        <ul class="list-disc pl-5 space-y-1">
          {related.map(r => (
            <li><a class="hover:underline" href={`${base}/blog/${r.slug}`}>{r.data.title}</a></li>
          ))}
        </ul>
      </section>
    )}
  </article>
</Layout>
