---
import Layout from "../../layouts/Layout.astro";
import { dict, normalizeLang, languages } from "../../i18n";
import { getCollection } from "astro:content";

export const prerender = true;

export function getStaticPaths() {
  return (languages as readonly string[]).map((lang) => ({ params: { lang } }));
}

const lang = normalizeLang(Astro.params.lang as string);
const t = dict[lang];

const all = await getCollection("projects");
const items = all
  .filter((x) => x.data.lang === lang && !x.data.draft)
  .sort((a, b) => +b.data.date - +a.data.date);

const base = lang === "en" ? "/en" : `/${lang}`;

// 切换语言后仍停留在项目列表页
const alternates = Object.fromEntries(
  (languages as readonly string[]).map((code) => [code, `${code === "en" ? "/en" : "/" + code}/projects`])
);
---

<Layout lang={lang} title={`Xiaosi Huang · ${t.projects.title}`} alternates={alternates}>
  <!-- 与 Blog 完全一致：不加 py，上下间距交给全局布局 -->
  <section class="mx-auto max-w-5xl px-4">
    <!-- 与 Blog 一致的标题与副标题样式 -->
    <h1 class="text-4xl font-extrabold mb-3">{t.projects.title}</h1>
    {t.projects.subtitle && (
      <p class="opacity-70 mb-8">{t.projects.subtitle}</p>
    )}

    {items.length === 0 ? (
      <p class="opacity-60">{t.blog.empty || "No projects yet."}</p>
    ) : (
      <!-- 两列网格（手机 1 列 / 桌面 2 列），卡片风格与 Blog 列表一致 -->
      <ul class="grid grid-cols-1 md:grid-cols-2 gap-6">
        {items.map((p) => (
          <li class="rounded-2xl border border-zinc-200 dark:border-zinc-800 hover:shadow-md transition group">
            <a href={`${base}/projects/${p.slug}`} class="block p-6">
              <h2 class="text-2xl font-semibold group-hover:underline break-anywhere">
                {p.data.title}
              </h2>

              {p.data.excerpt && (
                <p class="mt-2 text-sm text-gray-600 dark:text-gray-400 break-anywhere">
                  {p.data.excerpt}
                </p>
              )}

              <div class="mt-3 flex flex-wrap items-center gap-x-3 gap-y-2 text-xs text-zinc-500">
                <time datetime={p.data.date.toISOString()}>
                  {p.data.date.toLocaleDateString(lang)}
                </time>

                {p.data.tags?.length > 0 && (
                  <div class="flex flex-wrap gap-2">
                    {p.data.tags.map((tag) => (
                      <span class="text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
              </div>
            </a>
          </li>
        ))}
      </ul>
    )}
  </section>
</Layout>
