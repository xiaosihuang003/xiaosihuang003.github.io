---
// /src/pages/[lang]/docs.astro
import Layout from "../../layouts/Layout.astro";
import { dict, normalizeLang, languages } from "../../i18n";
import { getCollection } from "astro:content";

export const prerender = true;

/** 每种语言一条静态路径 */
export function getStaticPaths() {
  return languages.map((code) => ({ params: { lang: code } }));
}

const lang = normalizeLang(Astro.params.lang as string);
const t = dict[lang];
const base = lang === "en" ? "/en" : `/${lang}`;

/** 取 docs 集合，按文件路径推断语言（最后一段），只取当前语言且非草稿 */
const all = await getCollection("docs");
const posts = all
  .map((e) => {
    const parts = e.slug.split("/");
    const entryLang = parts.at(-1) || "en";
    const slug = parts.slice(0, -1).join("/") || parts[0];
    return { entry: e, entryLang, slug };
  })
  .filter((x) => x.entryLang === lang && !x.entry.data.draft)
  .sort(
    (a, b) => +new Date(b.entry.data.date as any) - +new Date(a.entry.data.date as any)
  );

/** 汇总标签（当前语言） */
const tagCounts = new Map<string, number>();
for (const { entry } of posts) {
  for (const tag of (entry.data.tags ?? []).map(String)) {
    tagCounts.set(tag, (tagCounts.get(tag) ?? 0) + 1);
  }
}
const allTags = Array.from(tagCounts.entries()).sort((a, b) =>
  a[0].localeCompare(b[0])
);

const alternates = Object.fromEntries(
  languages.map((code) => [code, `${code === "en" ? "/en" : "/" + code}/docs`]),
);
---

<Layout lang={lang} title={`Xiaosi Huang · ${t.docs.title}`} alternates={alternates}>
  <section class="mx-auto max-w-5xl px-4">
    <h1 class="text-4xl font-extrabold mb-2">{t.docs.title}</h1>

    {/* 副标题 + 右侧 combobox 同行布局（桌面端） */}
    <div class="subrow">
      <p class="subtitle">{t.docs.subtitle}</p>

      {allTags.length > 0 && (
        <div
          class="tags-toolbar"
          aria-label={t.ui.tags?.ariaFilterByTags || "Filter posts by tags"}
          data-result={t.ui.tags?.result || "result"}
          data-results={t.ui.tags?.results || "results"}
          data-noresults={t.ui.tags?.noResults || "No results"}
        >
          <div class="combo" id="tagCombo" data-behavior="combo">
            <div class="combo-input" id="comboInput">
              <div id="selectedTags" class="chips" aria-live="polite"></div>
              <input
                id="tagSearch"
                type="text"
                placeholder={t.ui.tags?.placeholder || "Filter tags…"}
                aria-label={t.ui.tags?.placeholder || "Filter tags"}
                autocomplete="off"
              />
              <button
                id="clearTags"
                type="button"
                class="clear-btn"
                title={t.ui.tags?.clear || "Clear selection"}
                aria-label={t.ui.tags?.clear || "Clear selection"}
              >✕</button>
            </div>

            <ul class="combo-list" id="tagList" role="listbox">
              {allTags.map(([name, cnt]) => (
                <li data-tag={name}>
                  <label>
                    <input type="checkbox" value={name} />
                    <span class="tag-name">{name}</span>
                    <span class="tag-count">({cnt})</span>
                  </label>
                </li>
              ))}
            </ul>
          </div>

          <span id="resultCount" class="result-count"></span>
        </div>
      )}
    </div>

    {posts.length === 0 ? (
      <p class="opacity-60">{t.docs.empty || "No docs yet."}</p>
    ) : (
      <ul id="docList" class="space-y-5">
        {posts.map(({ entry: p, slug }) => {
          const tags = (p.data.tags ?? []).map(String);
          return (
            <li
              class="blog-card group rounded-2xl border border-zinc-200 dark:border-zinc-800 p-6 hover:shadow-md transition"
              data-tags={tags.join("|")}
            >
              <a href={`${base}/docs/${slug}`} class="block">
                <div class="flex items-start gap-4">
                  <div class="min-w-0 flex-1">
                    <div class="flex items-center gap-2 mb-2">
                      {p.data.date && (
                        <time
                          datetime={p.data.date.toISOString?.() ?? String(p.data.date)}
                          class="blog-date"
                        >
                          {new Date(p.data.date).toLocaleDateString(lang)}
                        </time>
                      )}
                    </div>

                    <h2 class="blog-title clamp-2 break-anywhere">{p.data.title}</h2>

                    {p.data.excerpt && (
                      <p class="blog-excerpt clamp-2 mt-2 break-anywhere">{p.data.excerpt}</p>
                    )}

                    {tags.length > 0 && (
                      <div class="mt-3 flex flex-wrap gap-2" onClick={(e) => e.stopPropagation()}>
                        {tags.slice(0, 4).map((tag) => (
                          <a
                            class="blog-tag"
                            href={`?tags=${encodeURIComponent(tag)}`}
                            aria-label={`Filter by ${tag}`}
                          >
                            #{tag}
                          </a>
                        ))}
                        {tags.length > 4 && (
                          <span class="blog-tag">+{tags.length - 4}</span>
                        )}
                      </div>
                    )}
                  </div>

                  {p.data.cover && (
                    <img
                      src={p.data.cover}
                      alt={p.data.coverAlt || p.data.title}
                      class="hidden sm:block w-20 h-20 object-cover rounded-lg bg-white dark:bg-zinc-900 ring-1 ring-zinc-200/70 dark:ring-zinc-800/80"
                      loading="lazy"
                      sizes="80px"
                    />
                  )}
                </div>
              </a>
            </li>
          );
        })}
      </ul>
    )}
  </section>

  {/* 多选 + 搜索 combobox 的行为脚本（无依赖） —— 完全保留原逻辑 */}
  <script is:inline>
    (function () {
      const $list = document.getElementById('docList');
      const $combo = document.getElementById('tagCombo');
      const $search = document.getElementById('tagSearch');
      const $ul = document.getElementById('tagList');
      const $chips = document.getElementById('selectedTags');
      const $clear = document.getElementById('clearTags');
      const $count = document.getElementById('resultCount');
      const $toolbar = document.querySelector('.tags-toolbar');
      if (!$list || !$combo || !$search || !$ul || !$chips) return;

      const I18N = {
        result: $toolbar?.dataset.result || 'result',
        results: $toolbar?.dataset.results || 'results',
        noResults: $toolbar?.dataset.noresults || 'No results',
      };

      const sep = '|'; // data-tags 分隔符（不要在 tag 名里用 |）
      const cards = Array.from($list.children);

      const getQS = () => new URLSearchParams(location.search);
      const setQS = (tags) => {
        const qs = getQS();
        if (tags.length) qs.set('tags', tags.map(encodeURIComponent).join(','));
        else qs.delete('tags');
        history.replaceState(null, '', location.pathname + (qs.toString() ? '?' + qs.toString() : '') + location.hash);
      };

      const readQS = () => {
        const qs = getQS();
        const raw = qs.get('tags') || '';
        return raw
          .split(',')
          .map((s) => decodeURIComponent(s.trim()))
          .filter(Boolean);
      };

      const state = {
        selected: new Set(readQS()),
        open: false,
      };

      function syncUIFromState() {
        Array.from($ul.querySelectorAll('input[type="checkbox"]')).forEach((cb) => {
          cb.checked = state.selected.has(cb.value);
        });
        $chips.innerHTML = '';
        state.selected.forEach((tag) => {
          const btn = document.createElement('button');
          btn.type = 'button';
          btn.className = 'chip';
          btn.setAttribute('aria-label', `Remove ${tag}`);
          btn.textContent = tag;
          const x = document.createElement('span');
          x.className = 'chip-x';
          x.textContent = '×';
          btn.appendChild(x);
          btn.addEventListener('click', (e) => {
            e.stopPropagation();
            state.selected.delete(tag);
            setQS(Array.from(state.selected));
            syncUIFromState();
            applyFilter();
          });
          $chips.appendChild(btn);
        });
        $clear.style.display = state.selected.size ? '' : 'none';
      }

      function applyFilter() {
        const sel = Array.from(state.selected);
        let shown = 0;
        cards.forEach((li) => {
          const tags = (li.getAttribute('data-tags') || '').split(sep).filter(Boolean);
          const visible = sel.length === 0 || sel.every((t) => tags.includes(t));
          li.style.display = visible ? '' : 'none';
          if (visible) shown++;
        });
        if ($count) $count.textContent = shown ? `${shown} ${shown>1?I18N.results:I18N.result}` : I18N.noResults;
      }

      function open() { $combo.classList.add('open'); state.open = true; }
      function close() { $combo.classList.remove('open'); state.open = false; }
      function filterList() {
        const q = $search.value.trim().toLowerCase();
        Array.from($ul.children).forEach((li) => {
          const name = (li.getAttribute('data-tag') || '').toLowerCase();
        li.style.display = !q || name.includes(q) ? '' : 'none';
        });
      }

      $ul.addEventListener('change', (e) => {
        const cb = e.target;
        if (!(cb && cb.type === 'checkbox')) return;
        const tag = cb.value;
        if (cb.checked) state.selected.add(tag);
        else state.selected.delete(tag);
        setQS(Array.from(state.selected));
        syncUIFromState();
        applyFilter();
      });

      $search.addEventListener('focus', open);
      $search.addEventListener('input', filterList);

      $clear.addEventListener('click', () => {
        state.selected.clear();
        $search.value = '';
        setQS([]);
        syncUIFromState();
        filterList();
        applyFilter();
        $search.focus();
      });

      document.addEventListener('click', (e) => {
        if (!$combo.contains(e.target)) close();
      });
      $combo.addEventListener('click', (e) => {
        if (e.target === $search) return;
        open();
        $search.focus();
      });

      syncUIFromState();
      filterList();
      applyFilter();
    })();
  </script>
</Layout>

<style>
/* 本页统一盒模型，避免边框/内边距把宽度撑爆 */
*, *::before, *::after { box-sizing: border-box; }

/* --------- 原有卡片样式保留 --------- */
.blog-card{ transition: box-shadow .2s ease, transform .2s ease; }
.blog-card:hover{ transform: translateY(-1px); box-shadow: 0 6px 24px rgba(0,0,0,.08); }
.blog-title{ font-size:1.35rem; line-height:1.28; letter-spacing:-.01em; font-weight:600; }
.blog-excerpt{ font-size:1rem; color: var(--muted); }
.blog-date{ font-size:.8rem; color:#6b7280; }
.blog-tag{ font-size:.75rem; background:var(--tag-bg); color:var(--muted); padding:.3rem .55rem; border-radius:.55rem; border:1px solid var(--border); text-decoration:none; }
.clamp-2{ display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical; overflow:hidden; }

/* --------- 顶部副标题 + 右侧筛选同一行（桌面端） --------- */
.subrow{ display:flex; align-items:center; gap: 1rem; margin-bottom: .75rem; }
.subtitle{ margin: 0; opacity:.7; }
.tags-toolbar{ margin-left:auto; display:flex; align-items:center; gap:.6rem; }

/* --------- 可搜索多选 combobox --------- */
.combo{
  position: relative;
  width: 260px;               /* 桌面端固定宽度（与卡片右缘对齐） */
  max-width: 100%;
}
.combo-input{
  display:flex; align-items:center; gap:.4rem;
  flex-wrap: wrap;            /* ✅ 允许换行，chips 多时不撑爆 */
  width: 100%;
  min-height: 30px;           /* 原始高度，保持设计 */
  padding: .25rem .5rem .25rem .6rem;
  border:1px solid var(--border);
  border-radius:.65rem;
  background: var(--card);
}
.combo-input input{
  flex: 1 1 50px;
  min-width: 48px;
  border:0; outline:0; background:transparent; color:inherit; font-size:.95rem;
  padding:.2rem 0;
}
.clear-btn{
  display:none;
  border:0; background:transparent; cursor:pointer;
  font-size:1rem; line-height:1; color:var(--muted);
}
.chips{
  display:flex; flex-wrap:wrap; gap:.35rem; width:100%;
}
.chip{
  display:inline-flex; align-items:center; gap:.3rem;
  border:1px solid var(--border); background:var(--tag-bg);
  color:inherit; border-radius:.6rem; padding:.2rem .45rem; font-size:.75rem; cursor:pointer;
  max-width: 100%;
  white-space: normal;        /* ✅ 允许多行 */
  overflow-wrap: anywhere;    /* ✅ 允许任意处断词 */
  word-break: break-word;
  hyphens: auto;
}
.chip .chip-x{ opacity:.7; }

.combo-list{
  position:absolute; z-index:50;
  left: 0; right: 0;          /* ✅ 与输入框等宽，不超出容器 */
  top: calc(100% + 6px);
  max-height: 280px; overflow:auto;
  background: var(--card);
  border:1px solid var(--border);
  border-radius:.65rem; padding:.35rem;
  display:none;
}
.combo.open .combo-list{ display:block; }
.combo-list li{ list-style:none; }
.combo-list li label{
  display:flex; align-items:center; gap:.5rem;
  padding:.35rem .4rem; border-radius:.5rem; cursor:pointer;
}
.combo-list li:hover label{ background: rgba(127,127,127,.08); }
.tag-name{ font-size:.9rem; }
.tag-count{ font-size:.78rem; color:var(--muted); }

.result-count{ font-size:.85rem; color: var(--muted); white-space:nowrap; }

/* --------- 移动端专用修复（≤768px） --------- */
@media (max-width: 768px){
  /* 兜底：任何情况下都不允许横向滚动 */
  html, body { overflow-x: hidden; }

  /* 顶部行变为竖向堆叠，避免筛选框+结果数同排挤出宽度 */
  .subrow{ flex-direction:column; align-items:flex-start; gap:.6rem; }
  .tags-toolbar{ margin-left:0; width:100%; flex-direction: column; align-items: stretch; gap:.4rem; }
  .combo{ width:100%; }
  .result-count{ align-self:flex-end; } /* 结果数放到右侧，但不与输入框同排 */
}
</style>
