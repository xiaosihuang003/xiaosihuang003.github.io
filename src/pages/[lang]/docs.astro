---
import Layout from "../../layouts/Layout.astro";
import { dict, normalizeLang, languages } from "../../i18n";
import { getCollection } from "astro:content";

export const prerender = true;

/** 每种语言一条静态路径 */
export function getStaticPaths() {
  return languages.map((code) => ({ params: { lang: code } }));
}

const lang = normalizeLang(Astro.params.lang as string);
const t = dict[lang];
const base = lang === "en" ? "/en" : `/${lang}`;

/** 取 docs 集合，按文件路径推断语言（最后一段），只取当前语言且非草稿 */
const all = await getCollection("docs");
const posts = all
  .map((e) => {
    const parts = e.slug.split("/");
    const entryLang = parts.at(-1) || "en";
    const slug = parts.slice(0, -1).join("/") || parts[0];
    return { entry: e, entryLang, slug };
  })
  .filter((x) => x.entryLang === lang && !x.entry.data.draft)
  .sort(
    (a, b) => +new Date(b.entry.data.date as any) - +new Date(a.entry.data.date as any)
  );

/** 统计当前语言下的所有唯一标签 */
const tagCounts = new Map<string, number>();
for (const { entry } of posts) {
  for (const tag of (entry.data.tags ?? []).map(String)) {
    tagCounts.set(tag, (tagCounts.get(tag) ?? 0) + 1);
  }
}
const allTags = Array.from(tagCounts.entries()).sort((a, b) =>
  a[0].localeCompare(b[0])
);

const alternates = Object.fromEntries(
  languages.map((code) => [code, `${code === "en" ? "/en" : "/" + code}/docs`]),
);
---

<Layout lang={lang} title={`Xiaosi Huang · ${t.docs.title}`} alternates={alternates}>
  <section class="mx-auto max-w-5xl px-4">
    <h1 class="text-4xl font-extrabold mb-2">{t.docs.title}</h1>
    <p class="opacity-70 mb-6">{t.docs.subtitle}</p>

    {/* 下拉筛选条：从 allTags 动态生成 */}
    {allTags.length > 0 && (
      <div class="tags-toolbar">
        <label for="tagSelect" class="sr-only">Filter by tag</label>
        <select id="tagSelect" class="tag-select">
          <option value="">All</option>
          {allTags.map(([name, cnt]) => (
            <option value={name}>
              {name} ({cnt})
            </option>
          ))}
        </select>
        <span id="resultCount" class="result-count"></span>
      </div>
    )}

    {posts.length === 0 ? (
      <p class="opacity-60">{t.docs.empty || "No docs yet."}</p>
    ) : (
      <ul id="docList" class="space-y-5">
        {posts.map(({ entry: p, slug }) => {
          const tags = (p.data.tags ?? []).map(String);
          return (
            <li
              class="blog-card group rounded-2xl border border-zinc-200 dark:border-zinc-800 p-6 hover:shadow-md transition"
              data-tags={tags.join("|")}  /* 用于前端筛选 */
            >
              <a href={`${base}/docs/${slug}`} class="block">
                <div class="flex items-start gap-4">
                  {/* 左侧文本 */}
                  <div class="min-w-0 flex-1">
                    <div class="flex items-center gap-2 mb-2">
                      {p.data.date && (
                        <time
                          datetime={p.data.date.toISOString?.() ?? String(p.data.date)}
                          class="blog-date"
                        >
                          {new Date(p.data.date).toLocaleDateString(lang)}
                        </time>
                      )}
                    </div>

                    <h2 class="blog-title clamp-2 break-anywhere">{p.data.title}</h2>

                    {p.data.excerpt && (
                      <p class="blog-excerpt clamp-2 mt-2 break-anywhere">{p.data.excerpt}</p>
                    )}

                    {tags.length > 0 && (
                      <div class="mt-3 flex flex-wrap gap-2" onClick={(e) => e.stopPropagation()}>
                        {tags.slice(0, 4).map((tag) => (
                          <a
                            class="blog-tag"
                            href={`?tag=${encodeURIComponent(tag)}`}
                            aria-label={`Filter by ${tag}`}
                          >
                            #{tag}
                          </a>
                        ))}
                        {tags.length > 4 && (
                          <span class="blog-tag">+{tags.length - 4}</span>
                        )}
                      </div>
                    )}
                  </div>

                  {/* 右侧可选封面缩略图（有 cover 就显示） */}
                  {p.data.cover && (
                    <img
                      src={p.data.cover}
                      alt={p.data.coverAlt || p.data.title}
                      class="hidden sm:block w-20 h-20 object-cover rounded-lg bg-white dark:bg-zinc-900 ring-1 ring-zinc-200/70 dark:ring-zinc-800/80"
                      loading="lazy"
                      sizes="80px"
                    />
                  )}
                </div>
              </a>
            </li>
          );
        })}
      </ul>
    )}
  </section>

  {/* 前端筛选脚本：读取 ?tag=，控制显示与计数，并同步下拉框 */}
  <script is:inline>
    (function () {
      const $select = document.getElementById('tagSelect');
      const $list = document.getElementById('docList');
      const $count = document.getElementById('resultCount');

      if (!$list || !$select) return;

      const cards = Array.from($list.children);
      const qs = new URLSearchParams(location.search);
      const initialTag = qs.get('tag') || '';

      // 初始选中
      if (initialTag) {
        const opt = Array.from($select.options).find(o => o.value === initialTag);
        if (opt) $select.value = initialTag;
      }

      const apply = (tag) => {
        let shown = 0;
        cards.forEach((li) => {
          const tags = (li.getAttribute('data-tags') || '').split('|').filter(Boolean);
          const visible = !tag || tags.includes(tag);
          li.style.display = visible ? '' : 'none';
          if (visible) shown++;
        });
        if ($count) {
          $count.textContent = shown ? `${shown} result${shown>1?'s':''}` : 'No results';
        }
      };

      // 监听下拉变化：更新 URL（无刷新），并应用过滤
      $select.addEventListener('change', () => {
        const value = $select.value;
        const newQS = new URLSearchParams(location.search);
        if (value) newQS.set('tag', value);
        else newQS.delete('tag');
        const newUrl = `${location.pathname}${newQS.toString() ? '?' + newQS.toString() : ''}${location.hash}`;
        history.replaceState(null, '', newUrl);
        apply(value);
      });

      // 首次应用
      apply(initialTag);
    })();
  </script>
</Layout>

<style>
.blog-card{ transition: box-shadow .2s ease, transform .2s ease; }
.blog-card:hover{ transform: translateY(-1px); box-shadow: 0 6px 24px rgba(0,0,0,.08); }
.blog-title{ font-size:1.35rem; line-height:1.28; letter-spacing:-.01em; font-weight:600; }
.blog-excerpt{ font-size:1rem; color: var(--muted); }
.blog-date{ font-size:.8rem; color:#6b7280; }
.blog-tag{ font-size:.75rem; background:var(--tag-bg); color:var(--muted); padding:.3rem .55rem; border-radius:.55rem; border:1px solid var(--border); text-decoration:none; }
.clamp-2{ display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical; overflow:hidden; }

/* 筛选条：横向紧凑布局 */
.tags-toolbar{
  display:flex; align-items:center; gap:.6rem; margin: 0 0 1rem 0;
}
.tag-select{
  appearance:none; -webkit-appearance:none; -moz-appearance:none;
  padding:.45rem .75rem; border:1px solid var(--border); border-radius:.55rem;
  background: var(--card); color: inherit; font-size:.9rem;
}
.result-count{ font-size:.85rem; color: var(--muted); }
.sr-only{ position:absolute; width:1px; height:1px; padding:0; margin:-1px; overflow:hidden; clip:rect(0,0,0,0); border:0; }
</style>
